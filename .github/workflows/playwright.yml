# name: Playwright Tests
# on:
#   push:
#     branches: [ main, master ]
#   pull_request:
#     branches: [ main, master ]
# jobs:
#   test:
#     timeout-minutes: 60
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v4
#     - uses: actions/setup-node@v4
#       with:
#         node-version: lts/*
#     - name: Install dependencies
#       run: npm ci
#     - name: Install Playwright Browsers
#       run: npx playwright install --with-deps
#     - name: Run Playwright tests
#       run: npx playwright test
#     - uses: actions/upload-artifact@v4
#       if: ${{ !cancelled() }}
#       with:
#         name: playwright-report
#         path: playwright-report/
#         retention-days: 30

# only generate allure report
# name: Playwright Tests with Allure Reports

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
#   schedule:
#     - cron: "0 0 * * *" # Run every midnight UTC

# jobs:
#   test:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 18

#       - name: Install dependencies
#         run: npm ci

#       - name: Install Playwright browsers
#         run: npx playwright install --with-deps

#       - name: Install Allure Command Line Tool
#         run: npm install -g allure-commandline --save-dev

#       - name: Run Playwright tests with Allure
#         run: npx playwright test --reporter=allure-playwright
#         continue-on-error: true # ✅ Prevents stopping the workflow if tests fail

#       - name: Generate Allure Report
#         if: always() # ✅ Ensures this step runs even if previous steps fail
#         run: |
#           if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
#             npx allure generate allure-results --clean -o allure-report
#             cd allure-report
#             zip -r ../allure-report.zip . # ✅ Correct zipping method
#             cd ..
#           else
#             echo "No Allure results found, skipping report generation."
#           fi

#       - name: Upload Allure Report Artifact
#         if: always() # ✅ Ensures this step runs even if previous steps fail
#         uses: actions/upload-artifact@v4
#         with:
#           name: allure-report
#           path: allure-report/
#           retention-days: 30

#       - name: Send Email with Allure Report Link
#         if: always() # ✅ Ensures this step runs even if previous steps fail
#         uses: dawidd6/action-send-mail@v3
#         with:
#           server_address: smtp.gmail.com
#           server_port: 465
#           username: ${{ secrets.EMAIL_USERNAME }}
#           password: ${{ secrets.EMAIL_PASSWORD }}
#           subject: "Allure Report for Playwright Tests"
#           body: |
#             The Playwright test run has completed.

#             🔗 **Allure Report Download Link:**
#             👉 [Click here to download the Allure report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

#             📌 **Run Details:**
#             - Repository: ${{ github.repository }}
#             - Branch: ${{ github.ref_name }}
#             - Commit: ${{ github.sha }}
#             - Workflow Run: ${{ github.run_id }}

#           to: "sazidahmednassir@gmail.com" # Replace with the actual recipient email
#           from: "${{ secrets.EMAIL_USERNAME }}"

# only it is working as expected
# name: Playwright Tests with Summary Report

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
#   schedule:
#     - cron: "0 0 * * *" # Run every midnight UTC

# jobs:
#   test:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 18

#       - name: Install dependencies
#         run: npm ci

#       - name: Install Playwright browsers
#         run: npx playwright install --with-deps

#       - name: Run Playwright Tests and Save Results
#         run: |
#           npx playwright test --reporter=json > test-results.json || echo "TEST_FAILED=true" >> $GITHUB_ENV
#         continue-on-error: true # Allow workflow to continue even if tests fail

#       - name: Parse Test Results
#         run: |
#           TOTAL=$(jq '[.suites[].specs[].tests[].results | length] | add // 0' test-results.json)
#           PASSED=$(jq '[.suites[].specs[].tests[].results[] | select(.status=="passed")] | length // 0' test-results.json)
#           FAILED=$(jq '[.suites[].specs[].tests[].results[] | select(.status=="failed")] | length // 0' test-results.json)
#           SKIPPED=$(jq '[.suites[].specs[].tests[].results[] | select(.status=="skipped")] | length // 0' test-results.json)

#           echo "TOTAL_TESTS=$TOTAL" >> $GITHUB_ENV
#           echo "PASSED_TESTS=$PASSED" >> $GITHUB_ENV
#           echo "FAILED_TESTS=$FAILED" >> $GITHUB_ENV
#           echo "SKIPPED_TESTS=$SKIPPED" >> $GITHUB_ENV

#       - name: Send Email with Test Results
#         uses: dawidd6/action-send-mail@v3
#         with:
#           server_address: smtp.gmail.com
#           server_port: 465
#           username: ${{ secrets.EMAIL_USERNAME }}
#           password: ${{ secrets.EMAIL_PASSWORD }}
#           subject: "Playwright Test Results"
#           body: |
#             ✅ **Test Run Summary:**

#             - ✅ Passed: ${{ env.PASSED_TESTS }}
#             - ❌ Failed: ${{ env.FAILED_TESTS }}
#             - ⚠️ Skipped: ${{ env.SKIPPED_TESTS }}
#             - 📊 Total: ${{ env.TOTAL_TESTS }}

#             📌 **Run Details:**
#             - Repository: ${{ github.repository }}
#             - Branch: ${{ github.ref_name }}
#             - Commit: ${{ github.sha }}
#             - Workflow Run: ${{ github.run_id }}
#             - [View Full GitHub Actions Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

#           to: "sazidahmednassir@gmail.com"
#           from: ${{ secrets.EMAIL_USERNAME }}

#       - name: Fail Workflow if Tests Failed
#         if: env.TEST_FAILED == 'true'
#         run: echo "Test execution had failures, marking job as failed." && exit 1
#         continue-on-error: true

#

name: Playwright Test Automation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 18 * * *"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Install browsers
        run: npx playwright install --with-deps

      - name: Run tests
        run: |
          npx playwright test --reporter=json --workers=2 > test-results.json || echo "TEST_FAILED=true" >> $GITHUB_ENV
        continue-on-error: true

      - name: Process results
        continue-on-error: true
        run: |
          # Improved JSON parsing with parent file inheritance
          FLATTENED=$(jq '[.. | .suites? | select(. != null)]' test-results.json || echo '[]')

          # Get counts
          TOTAL=$(jq 'map(.. | .specs? | .[]? | .tests? | .[]? | .results | length) | add // 0' <<< "$FLATTENED")
          PASSED=$(jq '[.[] | .. | .specs? | .[]? | .tests? | .[]? | .results[]? | select(.status=="passed")] | length // 0' <<< "$FLATTENED")
          FAILED=$(jq '[.[] | .. | .specs? | .[]? | .tests? | .[]? | .results[]? | select(.status=="failed")] | length // 0' <<< "$FLATTENED")
          SKIPPED=$(jq '[.[] | .. | .specs? | .[]? | .tests? | .[]? | .results[]? | select(.status=="skipped")] | length // 0' <<< "$FLATTENED")

          # Get failed files with parent inheritance
          FAILED_FILES=$(jq -r '
            [.. | .suites? | select(. != null) |
            .specs[]? | 
            select(any(.tests[]?.results[]?; .status == "failed")) |
            .file // (.. | .parent? | .file?) // "unknown_file"
          ] | unique | join("\n")' <<< "$FLATTENED" || echo "")

          # Debug output
          echo "=== DEBUG OUTPUT ==="
          echo "Raw failed files:"
          echo "$FAILED_FILES"
          echo "===================="

          [ -z "$FAILED_FILES" ] && FAILED_FILES="No failed files detected"

          # Set environment variables
          echo "TOTAL_TESTS=$TOTAL" >> $GITHUB_ENV
          echo "PASSED_TESTS=$PASSED" >> $GITHUB_ENV
          echo "FAILED_TESTS=$FAILED" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=$SKIPPED" >> $GITHUB_ENV
          echo "FAILED_FILES_LIST<<EOF" >> $GITHUB_ENV
          echo "$FAILED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: GitHub Summary
        if: always()
        run: |
          echo "### 🔍 Test Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Metric       | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Passed    | ${{ env.PASSED_TESTS }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Failed    | ${{ env.FAILED_TESTS }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ⏩ Skipped   | ${{ env.SKIPPED_TESTS }} |" >> $GITHUB_STEP_SUMMARY

          echo "### 🚨 Failed Test Files" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.FAILED_TESTS }}" -gt 0 ]; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "${{ env.FAILED_FILES_LIST }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "All test files passed successfully 🎉" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Email Report
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Test Results: ${{ env.FAILED_TESTS }} failure(s)"
          body: |
            📊 Test Summary
            ✅ Passed: ${{ env.PASSED_TESTS }}
            ❌ Failed: ${{ env.FAILED_TESTS }}
            ⏩ Skipped: ${{ env.SKIPPED_TESTS }}

            🔍 Failed Files:
            ${{ env.FAILED_FILES_LIST }}

            📌 Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: sazidahmednassir@gmail.com
          from: ${{ secrets.EMAIL_USERNAME }}

      - name: Final Status
        if: env.TEST_FAILED == 'true'
        run: |
          echo "❌ Failing workflow due to ${{ env.FAILED_TESTS }} test failures"
          echo "Failed files:"
          echo "${{ env.FAILED_FILES_LIST }}"
          exit 1

# name: Playwright Tests
# on:
#   push:
#     branches: [ main, master ]
#   pull_request:
#     branches: [ main, master ]
# jobs:
#   test:
#     timeout-minutes: 60
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v4
#     - uses: actions/setup-node@v4
#       with:
#         node-version: lts/*
#     - name: Install dependencies
#       run: npm ci
#     - name: Install Playwright Browsers
#       run: npx playwright install --with-deps
#     - name: Run Playwright tests
#       run: npx playwright test
#     - uses: actions/upload-artifact@v4
#       if: ${{ !cancelled() }}
#       with:
#         name: playwright-report
#         path: playwright-report/
#         retention-days: 30

# only generate allure report
# name: Playwright Tests with Allure Reports

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
#   schedule:
#     - cron: "0 0 * * *" # Run every midnight UTC

# jobs:
#   test:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 18

#       - name: Install dependencies
#         run: npm ci

#       - name: Install Playwright browsers
#         run: npx playwright install --with-deps

#       - name: Install Allure Command Line Tool
#         run: npm install -g allure-commandline --save-dev

#       - name: Run Playwright tests with Allure
#         run: npx playwright test --reporter=allure-playwright
#         continue-on-error: true # ‚úÖ Prevents stopping the workflow if tests fail

#       - name: Generate Allure Report
#         if: always() # ‚úÖ Ensures this step runs even if previous steps fail
#         run: |
#           if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
#             npx allure generate allure-results --clean -o allure-report
#             cd allure-report
#             zip -r ../allure-report.zip . # ‚úÖ Correct zipping method
#             cd ..
#           else
#             echo "No Allure results found, skipping report generation."
#           fi

#       - name: Upload Allure Report Artifact
#         if: always() # ‚úÖ Ensures this step runs even if previous steps fail
#         uses: actions/upload-artifact@v4
#         with:
#           name: allure-report
#           path: allure-report/
#           retention-days: 30

#       - name: Send Email with Allure Report Link
#         if: always() # ‚úÖ Ensures this step runs even if previous steps fail
#         uses: dawidd6/action-send-mail@v3
#         with:
#           server_address: smtp.gmail.com
#           server_port: 465
#           username: ${{ secrets.EMAIL_USERNAME }}
#           password: ${{ secrets.EMAIL_PASSWORD }}
#           subject: "Allure Report for Playwright Tests"
#           body: |
#             The Playwright test run has completed.

#             üîó **Allure Report Download Link:**
#             üëâ [Click here to download the Allure report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

#             üìå **Run Details:**
#             - Repository: ${{ github.repository }}
#             - Branch: ${{ github.ref_name }}
#             - Commit: ${{ github.sha }}
#             - Workflow Run: ${{ github.run_id }}

#           to: "sazidahmednassir@gmail.com" # Replace with the actual recipient email
#           from: "${{ secrets.EMAIL_USERNAME }}"

# only it is working as expected
# name: Playwright Tests with Summary Report

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
#   schedule:
#     - cron: "0 0 * * *" # Run every midnight UTC

# jobs:
#   test:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 18

#       - name: Install dependencies
#         run: npm ci

#       - name: Install Playwright browsers
#         run: npx playwright install --with-deps

#       - name: Run Playwright Tests and Save Results
#         run: |
#           npx playwright test --reporter=json > test-results.json || echo "TEST_FAILED=true" >> $GITHUB_ENV
#         continue-on-error: true # Allow workflow to continue even if tests fail

#       - name: Parse Test Results
#         run: |
#           TOTAL=$(jq '[.suites[].specs[].tests[].results | length] | add // 0' test-results.json)
#           PASSED=$(jq '[.suites[].specs[].tests[].results[] | select(.status=="passed")] | length // 0' test-results.json)
#           FAILED=$(jq '[.suites[].specs[].tests[].results[] | select(.status=="failed")] | length // 0' test-results.json)
#           SKIPPED=$(jq '[.suites[].specs[].tests[].results[] | select(.status=="skipped")] | length // 0' test-results.json)

#           echo "TOTAL_TESTS=$TOTAL" >> $GITHUB_ENV
#           echo "PASSED_TESTS=$PASSED" >> $GITHUB_ENV
#           echo "FAILED_TESTS=$FAILED" >> $GITHUB_ENV
#           echo "SKIPPED_TESTS=$SKIPPED" >> $GITHUB_ENV

#       - name: Send Email with Test Results
#         uses: dawidd6/action-send-mail@v3
#         with:
#           server_address: smtp.gmail.com
#           server_port: 465
#           username: ${{ secrets.EMAIL_USERNAME }}
#           password: ${{ secrets.EMAIL_PASSWORD }}
#           subject: "Playwright Test Results"
#           body: |
#             ‚úÖ **Test Run Summary:**

#             - ‚úÖ Passed: ${{ env.PASSED_TESTS }}
#             - ‚ùå Failed: ${{ env.FAILED_TESTS }}
#             - ‚ö†Ô∏è Skipped: ${{ env.SKIPPED_TESTS }}
#             - üìä Total: ${{ env.TOTAL_TESTS }}

#             üìå **Run Details:**
#             - Repository: ${{ github.repository }}
#             - Branch: ${{ github.ref_name }}
#             - Commit: ${{ github.sha }}
#             - Workflow Run: ${{ github.run_id }}
#             - [View Full GitHub Actions Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

#           to: "sazidahmednassir@gmail.com"
#           from: ${{ secrets.EMAIL_USERNAME }}

#       - name: Fail Workflow if Tests Failed
#         if: env.TEST_FAILED == 'true'
#         run: echo "Test execution had failures, marking job as failed." && exit 1
#         continue-on-error: true

# name: ci

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2

#       - name: Use Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: "14"
#           cache: "npm"

#       - name: Clean npm cache and reinstall dependencies
#         run: |
#           rm -rf node_modules package-lock.json
#           npm install

#       - name: Install Playwright
#         run: npx playwright install

#       - name: Run tests
#         run: npm test

#       - uses: actions/upload-artifact@master
#         with:
#           name: allure-results
#           path: allure-results
#           retention-days: 20

#       - name: Get Allure history
#         uses: actions/checkout@v2
#         if: always()
#         continue-on-error: true
#         with:
#           ref: gh-pages
#           path: gh-pages

#       - name: Test marketplace action
#         uses: simple-elf/allure-report-action@master
#         if: always()
#         id: allure-report
#         with:
#           allure_results: allure-results
#           gh_pages: gh-pages
#           allure_report: allure-report
#           allure_history: allure-history
#           keep_reports: 20

#       - name: Deploy report to Github Pages
#         if: always()
#         uses: peaceiris/actions-gh-pages@v2
#         env:
#           PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           PUBLISH_BRANCH: gh-pages
#           PUBLISH_DIR: allure-history

name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Clean npm cache and reinstall dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Install Playwright
        run: npx playwright install

      - name: Run tests
        run: npm test

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results
          retention-days: 20

      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 20

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history

      - name: Send Allure Report via Email
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Allure Report - Test Execution Results"
          body: |
            Hello,

            The latest test execution report is available. You can view the report using the link below:

            üìé [View Allure Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)

            Regards,
            CI/CD Pipeline
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: ${{ secrets.EMAIL_USERNAME }}
          attachments: allure-history
